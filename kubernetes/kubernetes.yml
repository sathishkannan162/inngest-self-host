apiVersion: v1
kind: Namespace
metadata:
  name: inngest
---
# A ClusterIssuer for Let's Encrypt (production). Make sure Cert Manager is installed in the cluster.
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # Replace with your email
    email: admin@example.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
      - http01:
          ingress:
            class: nginx
---
# A Secret containing the basic auth credentials for NGINX
# This example encodes user 'admin' with password 'password' using htpasswd.
# You can generate your own with:
#   htpasswd -nb admin your-password
# Then base64-encode the entire string "admin:<hash>"
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth-secret
  namespace: inngest
type: Opaque
data:
  # This is base64-encoded of "admin:$apr1$ZP9tO83p$yCHhpLeXXpL12A3vZU1Fq."
  # (Just an example; generate your own)
  auth: YWRtaW46JGFwcjEkWlA5dE9PMGdwJHlDSGhwTGVYWHAxMkEzdlpVMUZxLg==
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: inngest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: inngest
spec:
  selector:
    app: redis
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inngest
  namespace: inngest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: inngest
  template:
    metadata:
      labels:
        app: inngest
    spec:
      containers:
        - name: inngest
          image: sathishkannan162/inngest:latest
          env:
            - name: EVENT_KEY
              value: "b8bc74f7312cb8653fa453ea2b643632"
            - name: SIGNING_KEY
              value: "923edcd52964f681533cb857ac2a70a983b57079fdd541fd876fde8e42d78f7c"
            - name: REDIS_URI
              value: "redis://redis-service:6379"
            - name: INNGEST_DEV
              value: "0"
          volumeMounts:
            - name: inngest-data
              mountPath: /usr/src/app/.inngest
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "1"
      volumes:
        - name: inngest-data
          persistentVolumeClaim:
            claimName: inngest-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: inngest-service
  namespace: inngest
spec:
  selector:
    app: inngest
  ports:
    - port: 8288
      targetPort: 8288
  type: ClusterIP
---
# Define an Ingress that routes to our inngest-service.
# Cert Manager will handle TLS certificate provisioning/renewal using Let's Encrypt.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: inngest-ingress
  namespace: inngest
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/auth-type: "basic"
    nginx.ingress.kubernetes.io/auth-secret: "basic-auth-secret"
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
spec:
  tls:
    - hosts:
        - inngest.sathishkannan.com
      secretName: inngest-tls
  rules:
    - host: inngest.sathishkannan.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: inngest-service
                port:
                  number: 8288
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: inngest
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: inngest-data-pvc
  namespace: inngest
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
